# For development only
services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:4200"
    environment:
      NODE_ENV: development
      TZ: Europe/Luxembourg
    volumes:
      - ./frontend/src:/home/oto/app/src

  backend:
    build:
      context: ./backend
    depends_on:
      - mongodb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ./backend/.env.development
    secrets:
      - MONGODB_USER
      - MONGODB_PW
      - WEBTOKEN_SECRET
      - CAM_USER
      - CAM_PW
    environment:
      NODE_ENV: development
      TZ: Europe/Luxembourg
    volumes:
      # dev volumes
      - ./backend/src:/home/oto/app/src
    healthcheck:
      test: "/usr/local/bin/nodejs /home/oto/app/healthcheck"
      interval: 1m30s
      timeout: 10s
      retries: 3

  tasks:
    build:
      context: ./tasks
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./tasks/.env.development
    secrets:
      - MONGODB_USER
      - MONGODB_PW
      - REDIS_PW
      - WEBTOKEN_SECRET
      - FLASK_SECRET
      - SSH_KEY_DOCKER_HOST
    environment:
      - "TZ=Europe/Luxembourg"
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: curl --fail -s http://localhost:5500/tasksapi/version || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    volumes:
      # for development
      - tasks_source:/home/oto/app/velona_tasks

  # In dev we start a worker immediately via docker-compose to make development easier
  worker:
    deploy:
      replicas: 2
    build:
      context: ./tasks
      dockerfile: ./worker/Dockerfile
    image: oto_worker:alpha
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./tasks/worker/.env.development
    # In prod it is tasks that starts worker and injects secrets into env. In dev new workers also follow that way
    secrets:
      - MONGODB_USER
      - MONGODB_PW
      - REDIS_PW
      - FLASK_SECRET
      - SSH_KEY_DOCKER_HOST
    environment:
      - QUEUES=single,scheduled
      - WORKER_NAME_SUFFIX=dev_docker_host  # docker host that worker will look for to be able to start new containers
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
    volumes: 
      # for development
      - tasks_source:/home/oto/app/velona_tasks

  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    secrets:
      - MONGO_INITDB_ROOT_PASSWORD
      - MONGODB_USER
      - MONGODB_PW
    environment:
      TZ: Europe/Luxembourg
      # mongo docker understands _FILE and loads the content
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/MONGO_INITDB_ROOT_PASSWORD
    command: mongod  --quiet --logpath /dev/null --bind_ip 0.0.0.0
    volumes:
      - mongodb:/data/db

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    secrets:
      - REDIS_PW
    environment:
      TZ: Europe/Luxembourg
      REDIS_PASS_FILE: /run/secrets/REDIS_PW
    command: [
      "bash", "-c",
      '
       docker-entrypoint.sh
       --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]

volumes:
  mongodb: {}
  tasks_source:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/workspace/oto/tasks/velona_tasks
      o: bind

secrets:
  SSH_KEY_DOCKER_HOST:
    # Used by tasks service to launch worker dockers on docker host
    # Used by workers themselves to start docker pipelines on docker host
    file: ./secrets/certificates/id_rsa_dev

  # passwords
  MONGODB_USER:
    file: ./secrets/passwords/MONGODB_USER
  MONGODB_PW:
    file: ./secrets/passwords/MONGODB_PW
  MONGO_INITDB_ROOT_PASSWORD:
    file: ./secrets/passwords/MONGO_INITDB_ROOT_PASSWORD
  REDIS_PW:
    file: ./secrets/passwords/REDIS_PW
  WEBTOKEN_SECRET:
    file: ./secrets/passwords/WEBTOKEN_SECRET
  FLASK_SECRET:
    file: ./secrets/passwords/FLASK_SECRET
  CAM_USER:
    file: ./secrets/passwords/CAM_USER
  CAM_PW:
    file: ./secrets/passwords/CAM_PW